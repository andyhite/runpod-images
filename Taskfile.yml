version: '3'

silent: true

dotenv:
  - versions.env
  - .env

vars:
  SERVICES:
    sh: ./scripts/command.sh get_available_services

tasks:
  default:
    silent: true
    cmds:
      - echo -e "\033[1;34mRunPod AI Services - Build and Deployment\033[0m"
      - echo ""
      - echo -e "\033[1;32mGeneral Tasks:\033[0m"
      - task --list --json | jq -r '.tasks | map(select(.name | test("^(versions)$"))) | sort_by(.name) | .[] | "  \u001b[33m" + .name + "\u001b[0m - " + .desc'
      - echo ""
      - echo -e "\033[1;32mService Tasks:\033[0m"
      - task --list --json | jq -r '.tasks | map(select(.name | startswith("*"))) | sort_by(.name) | .[] | "  \u001b[33m" + (.name | sub("^\\*"; "<service>")) + "\u001b[0m - " + .desc'
      - echo ""
      - echo -e "\033[1;32mServer Tasks:\033[0m"
      - task --list --json | jq -r '.tasks | map(select(.name | startswith("server"))) | sort_by(.name) | .[] | "  \u001b[33m" + .name + "\u001b[0m - " + .desc'

  #================================================================================
  # General Tasks
  #================================================================================

  "versions":
    desc: "Show all service image versions"
    cmds:
      - |
        echo -e "\033[1;34mService Image Versions:\033[0m"
        for service in {{.SERVICES}}; do
          if [ -n "$service" ]; then
            VERSION=$(./scripts/command.sh get_image_version "$service")
            if [ $? -eq 0 ] && [ -n "$VERSION" ]; then
              echo -e "\033[1;32m  $service: $VERSION\033[0m"
            else
              echo -e "\033[1;31m  $service: version not found\033[0m"
            fi
          fi
        done

  #================================================================================
  # Service Tasks
  #================================================================================

  "*:build":
    desc: "Build Docker image for specific service"
    vars:
      SERVICE: "{{index .MATCH 0}}"
    preconditions:
      - sh: ./scripts/command.sh validate_service {{.SERVICE}}
        msg: "Service {{.SERVICE}} not found or not configured in versions.env"
    cmds:
      - ./scripts/command.sh build_image {{.SERVICE}}

  "*:push":
    desc: "Build and push Docker image for specific service"
    vars:
      SERVICE: "{{index .MATCH 0}}"
    preconditions:
      - sh: ./scripts/command.sh validate_service {{.SERVICE}}
        msg: "Service {{.SERVICE}} not found or not configured in versions.env"
    cmds:
      - ./scripts/command.sh push_image {{.SERVICE}}

  "*:load":
    desc: "Build and load Docker image for specific service"
    vars:
      SERVICE: "{{index .MATCH 0}}"
    preconditions:
      - sh: ./scripts/command.sh validate_service {{.SERVICE}}
        msg: "Service {{.SERVICE}} not found or not configured in versions.env"
    cmds:
      - ./scripts/command.sh load_image {{.SERVICE}}

  "*:clean":
    desc: "Remove Docker image for specific service"
    vars:
      SERVICE: "{{index .MATCH 0}}"
    preconditions:
      - sh: ./scripts/command.sh validate_service {{.SERVICE}}
        msg: "Service {{.SERVICE}} not found or not configured in versions.env"
    cmds:
      - ./scripts/command.sh clean_image {{.SERVICE}}

  "*:start":
    desc: "Deploy specific service with dstack"
    deps: ["server:ensure"]
    env:
      INVOKEAI_REMOTE_API_TOKENS:
        sh: ./scripts/command.sh get_remote_api_tokens
      PUBLIC_KEY:
        sh: ./scripts/core/env.sh get_public_key
    vars:
      SERVICE: "{{index .MATCH 0}}"
    preconditions:
      - sh: ./scripts/command.sh validate_service {{.SERVICE}}
        msg: "Service {{.SERVICE}} not found or not configured in versions.env"
    cmds:
      - ./scripts/command.sh deploy_service_volume {{.SERVICE}}
      - ./scripts/command.sh start_service {{.SERVICE}}

  "*:logs":
    desc: "Show logs for specific service deployment"
    vars:
      SERVICE: "{{index .MATCH 0}}"
    preconditions:
      - sh: ./scripts/command.sh validate_service {{.SERVICE}}
        msg: "Service {{.SERVICE}} not found or not configured in versions.env"
      - sh: ./scripts/command.sh check_server_status
        msg: "dstack server is not running. Run 'task server:start' first."
    cmds:
      - ./scripts/command.sh get_service_logs {{.SERVICE}}

  "*:stop":
    desc: "Stop specific service deployment"
    vars:
      SERVICE: "{{index .MATCH 0}}"
    preconditions:
      - sh: ./scripts/command.sh validate_service {{.SERVICE}}
        msg: "Service {{.SERVICE}} not found or not configured in versions.env"
      - sh: ./scripts/command.sh check_server_status
        msg: "dstack server is not running. Run 'task server:start' first."
    cmds:
      - ./scripts/command.sh stop_service {{.SERVICE}}

  "*:version":
    desc: "Show image version for specific service"
    vars:
      SERVICE: "{{index .MATCH 0}}"
    preconditions:
      - sh: ./scripts/command.sh validate_service {{.SERVICE}}
        msg: "Service {{.SERVICE}} not found or not configured in versions.env"
    cmds:
      - ./scripts/command.sh show_image_version {{.SERVICE}}

  "*:version:*":
    desc: "Set image version for a service (e.g., invokeai:version:v6.6.0)"
    vars:
      SERVICE: "{{index .MATCH 0}}"
      VERSION: "{{index .MATCH 1}}"
    preconditions:
      - sh: ./scripts/command.sh validate_service {{.SERVICE}}
        msg: "Service {{.SERVICE}} not found or not configured in versions.env"
    cmds:
      - ./scripts/command.sh set_image_version {{.SERVICE}}={{.VERSION}}

  "*:status":
    desc: "Show deployment status for specific service"
    deps: ["server:ensure"]
    vars:
      SERVICE: "{{index .MATCH 0}}"
    preconditions:
      - sh: ./scripts/command.sh validate_service {{.SERVICE}}
        msg: "Service {{.SERVICE}} not found or not configured in versions.env"
    cmds:
      - ./scripts/command.sh show_service_status {{.SERVICE}}

  #================================================================================
  # Server Management
  #================================================================================

  "server:ensure":
    internal: true
    desc: "Ensure dstack server is running (start if needed)"
    cmds:
      - ./scripts/command.sh ensure_server

  "server:start":
    desc: "Start dstack server in foreground"
    cmds:
      - ./scripts/command.sh start_server

  "server:stop":
    desc: "Stop background dstack server"
    cmds:
      - ./scripts/command.sh stop_server

  "server:status":
    desc: "Check dstack server status"
    cmds:
      - ./scripts/command.sh get_server_status

  "server:logs":
    desc: "Show dstack server logs"
    cmds:
      - ./scripts/command.sh get_server_logs

